#version 400 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;

uniform vec3 lightPos;
uniform vec3 lightPos2; 
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
	// ambient
	float ambientStrength = 0.1;
	vec3 ambient = ambientStrength * lightColor;

	vec3 norm = normalize(Normal);

	// diffuse 
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse1 = diff * lightColor;

	// diffuse2
	lightDir = normalize(lightPos2 - FragPos);
	diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse2 = diff * lightColor;

	vec3 result = (ambient + diffuse1 + diffuse2) * objectColor;
	FragColor = vec4(result, 1.0);
}